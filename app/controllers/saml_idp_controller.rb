require "rexml/document"
require "rexml/xpath"

class SamlIdpController < ApplicationController
  include SamlIdp::Controller

  before_filter :validate_saml_request, only: :create

  #WELLPOINT_SAML_RESPONSE = ""
  WELLPOINT_SAML_RESPONSE = ""
  
  def new
  end

  def create
    if params[:id]
      @user = WellpointUser.find_by_id(params[:id])
      @saml_response = new_encode_SAMLResponse(@user.id, {issuer_uri: params[:issuer]}, get_custom_attributes(@user))
    else
      @user = WellpointUser.first
      @saml_response = WELLPOINT_SAML_RESPONSE 
    end

    render :action => 'new' if @user.nil?

    render :action => 'response'
  end

  def new_encode_SAMLResponse(nameID, opts = {}, custom_attributes = "")
    now = Time.now.utc
    response_id, reference_id = UUID.generate, UUID.generate
    audience_uri = opts[:audience_uri] || saml_acs_url[/^(.*?\/\/.*?\/)/, 1]
    issuer_uri = opts[:issuer_uri] || (defined?(request) && request.url) || "http://example.com"

    assertion = %[<ns2:Assertion xmlns:ns2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_#{reference_id}" IssueInstant="#{now.iso8601}" Version="2.0"><ns2:Issuer>#{issuer_uri}</ns2:Issuer><ns2:Subject><ns2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:transient">#{nameID}</ns2:NameID><ns2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><ns2:SubjectConfirmationData InResponseTo="#{@saml_request_id}" NotOnOrAfter="#{(now+3*60).iso8601}" Recipient="#{@saml_acs_url}"></ns2:SubjectConfirmationData></ns2:SubjectConfirmation></ns2:Subject><ns2:Conditions NotBefore="#{(now-5).iso8601}" NotOnOrAfter="#{(now+60*60).iso8601}"><ns2:AudienceRestriction><ns2:Audience>#{audience_uri}</ns2:Audience></ns2:AudienceRestriction></ns2:Conditions><ns2:AuthnStatement AuthnInstant="#{now.iso8601}" SessionIndex="_#{reference_id}"><ns2:AuthnContext><ns2:AuthnContextClassRef>urn:federation:authentication:windows</ns2:AuthnContextClassRef></ns2:AuthnContext></ns2:AuthnStatement><ns2:AttributeStatement><ns2:Attribute Name="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"><ns2:AttributeValue>#{nameID}</ns2:AttributeValue></ns2:Attribute>#{custom_attributes}</ns2:AttributeStatement></ns2:Assertion>]

    digest_value = Base64.encode64(algorithm.digest(assertion)).gsub(/\n/, '')

    signed_info = %[<ds:SignedInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"></ds:CanonicalizationMethod><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-#{algorithm_name}"></ds:SignatureMethod><ds:Reference URI="#_#{reference_id}"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"></ds:Transform><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig##{algorithm_name}"></ds:DigestMethod><ds:DigestValue>#{digest_value}</ds:DigestValue></ds:Reference></ds:SignedInfo>]

    signature_value = sign(signed_info).gsub(/\n/, '')

    signature = %[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">#{signed_info}<ds:SignatureValue>#{signature_value}</ds:SignatureValue><KeyInfo xmlns="http://www.w3.org/2000/09/xmldsig#"><ds:X509Data><ds:X509Certificate>#{self.x509_certificate}</ds:X509Certificate></ds:X509Data></KeyInfo></ds:Signature>]

    assertion_and_signature = assertion.sub(/ns2:Issuer\>\<ns2:Subject/, "ns2:Issuer>#{signature}<ns2:Subject")

    xml = %[<Response ID="_#{response_id}" Version="2.0" IssueInstant="#{now.iso8601}" Destination="#{@saml_acs_url}" Consent="urn:oasis:names:tc:SAML:2.0:consent:unspecified" InResponseTo="#{@saml_request_id}" xmlns="urn:oasis:names:tc:SAML:2.0:protocol"><ns1:Issuer xmlns:ns1="urn:oasis:names:tc:SAML:2.0:assertion">#{issuer_uri}</ns1:Issuer><Status><StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success" /></Status>#{assertion_and_signature}</Response>]

    Base64.encode64(xml)
  end

  private 

    def get_custom_attributes(user)
      attributes = [
        { name: 'SBSCRBR_ID',   value: user.hc_id.to_s },
        { name: 'MBR_SQNC_NBR', value: user.mbr_sqnc_nbr.to_s }
      ]

      attribute_statement = ''
      if attributes.count > 0
        attributes.each do |a|
          attribute_statement += %[<ns2:Attribute Name="#{a[:name]}" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:basic"><ns2:AttributeValue>#{a[:value]}</ns2:AttributeValue></ns2:Attribute>] 
        end
        attribute_statement
      end

      return attribute_statement
    end

end